// Copyright (c) 2023-2023 Beijing Xiaomi Mobile Software Co., Ltd. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by gencpp from file svo_msgs/Info.msg
// DO NOT EDIT!
#ifndef SVO_MSGS_MESSAGE_INFO_H
#define SVO_MSGS_MESSAGE_INFO_H
#include <string>
#include <vector>
#include <map>
#include <std_msgs/msg/header.hpp>

namespace svo_msgs
{
    template <class ContainerAllocator>
    struct Info_
    {
        typedef Info_<ContainerAllocator> Type;

        Info_()
            : header(), processing_time(0.0), keyframes(), num_matches(0), tracking_quality(0), stage(0)
        {
        }
        Info_(const ContainerAllocator &_alloc)
            : header(_alloc), processing_time(0.0), keyframes(_alloc), num_matches(0), tracking_quality(0), stage(0)
        {
            (void)_alloc;
        }

        typedef ::std_msgs::msg::Header_<ContainerAllocator> _header_type;
        _header_type header;

        typedef float _processing_time_type;
        _processing_time_type processing_time;

        typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other> _keyframes_type;
        _keyframes_type keyframes;

        typedef int32_t _num_matches_type;
        _num_matches_type num_matches;

        typedef int32_t _tracking_quality_type;
        _tracking_quality_type tracking_quality;

        typedef int32_t _stage_type;
        _stage_type stage;

        typedef boost::shared_ptr<::svo_msgs::Info_<ContainerAllocator>> Ptr;
        typedef boost::shared_ptr<::svo_msgs::Info_<ContainerAllocator> const> ConstPtr;

    }; // struct Info_

    typedef ::svo_msgs::Info_<std::allocator<void>> Info;

    typedef boost::shared_ptr<::svo_msgs::Info> InfoPtr;
    typedef boost::shared_ptr<::svo_msgs::Info const> InfoConstPtr;

    // constants requiring out of line definition

    template <typename ContainerAllocator>
    std::ostream &operator<<(std::ostream &s, const ::svo_msgs::Info_<ContainerAllocator> &v)
    {
        ros::message_operations::Printer<::svo_msgs::Info_<ContainerAllocator>>::Stream(s, "", v);
        return s;
    }

    template <typename ContainerAllocator1, typename ContainerAllocator2>
    bool operator==(const ::svo_msgs::Info_<ContainerAllocator1> &lhs, const ::svo_msgs::Info_<ContainerAllocator2> &rhs)
    {
        return lhs.header == rhs.header &&
               lhs.processing_time == rhs.processing_time &&
               lhs.keyframes == rhs.keyframes &&
               lhs.num_matches == rhs.num_matches &&
               lhs.tracking_quality == rhs.tracking_quality &&
               lhs.stage == rhs.stage;
    }

    template <typename ContainerAllocator1, typename ContainerAllocator2>
    bool operator!=(const ::svo_msgs::Info_<ContainerAllocator1> &lhs, const ::svo_msgs::Info_<ContainerAllocator2> &rhs)
    {
        return !(lhs == rhs);
    }
} // namespace svo_msgs

namespace ros
{
    namespace message_traits
    {
        template <class ContainerAllocator>
        struct IsFixedSize<::svo_msgs::Info_<ContainerAllocator>>
            : FalseType
        {
        };

        template <class ContainerAllocator>
        struct IsFixedSize<::svo_msgs::Info_<ContainerAllocator> const>
            : FalseType
        {
        };

        template <class ContainerAllocator>
        struct IsMessage<::svo_msgs::Info_<ContainerAllocator>>
            : TrueType
        {
        };

        template <class ContainerAllocator>
        struct IsMessage<::svo_msgs::Info_<ContainerAllocator> const>
            : TrueType
        {
        };

        template <class ContainerAllocator>
        struct HasHeader<::svo_msgs::Info_<ContainerAllocator>>
            : TrueType
        {
        };

        template <class ContainerAllocator>
        struct HasHeader<::svo_msgs::Info_<ContainerAllocator> const>
            : TrueType
        {
        };

        template <class ContainerAllocator>
        struct MD5Sum<::svo_msgs::Info_<ContainerAllocator>>
        {
            static const char *Value()
            {
                return "175acf2e539a9219addbcbeafca8552f";
            }

            static const char *Value(const ::svo_msgs::Info_<ContainerAllocator> &) { return Value(); }
            static const uint64_t static_value1 = 0x175acf2e539a9219ULL;
            static const uint64_t static_value2 = 0xaddbcbeafca8552fULL;
        };

        template <class ContainerAllocator>
        struct DataType<::svo_msgs::Info_<ContainerAllocator>>
        {
            static const char *Value()
            {
                return "svo_msgs/Info";
            }

            static const char *Value(const ::svo_msgs::Info_<ContainerAllocator> &) { return Value(); }
        };

        template <class ContainerAllocator>
        struct Definition<::svo_msgs::Info_<ContainerAllocator>>
        {
            static const char *Value()
            {
                return "Header      header\n"
                       "float32     processing_time\n"
                       "int32[]     keyframes\n"
                       "int32       num_matches\n"
                       "int32       tracking_quality\n"
                       "int32       stage\n"
                       "================================================================================\n"
                       "MSG: std_msgs/Header\n"
                       "# Standard metadata for higher-level stamped data types.\n"
                       "# This is generally used to communicate timestamped data \n"
                       "# in a particular coordinate frame.\n"
                       "# \n"
                       "# sequence ID: consecutively increasing ID \n"
                       "uint32 seq\n"
                       "#Two-integer timestamp that is expressed as:\n"
                       "# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
                       "# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
                       "# time-handling sugar is provided by the client library\n"
                       "time stamp\n"
                       "#Frame this data is associated with\n"
                       "string frame_id\n";
            }

            static const char *Value(const ::svo_msgs::Info_<ContainerAllocator> &) { return Value(); }
        };
    } // namespace message_traits
} // namespace ros

namespace ros
{
    namespace serialization
    {

        template <class ContainerAllocator>
        struct Serializer<::svo_msgs::Info_<ContainerAllocator>>
        {
            template <typename Stream, typename T>
            inline static void allInOne(Stream &stream, T m)
            {
                stream.next(m.header);
                stream.next(m.processing_time);
                stream.next(m.keyframes);
                stream.next(m.num_matches);
                stream.next(m.tracking_quality);
                stream.next(m.stage);
            }

            ROS_DECLARE_ALLINONE_SERIALIZER
        }; // struct Info_

    } // namespace serialization
} // namespace ros

namespace ros
{
    namespace message_operations
    {

        template <class ContainerAllocator>
        struct Printer<::svo_msgs::Info_<ContainerAllocator>>
        {
            template <typename Stream>
            static void Stream(Stream &s, const std::string &indent, const ::svo_msgs::Info_<ContainerAllocator> &v)
            {
                s << indent << "header: ";
                s << std::endl;
                Printer<::std_msgs::msg::Header_<ContainerAllocator>>::Stream(s, indent + "  ", v.header);
                s << indent << "processing_time: ";
                Printer<float>::Stream(s, indent + "  ", v.processing_time);
                s << indent << "keyframes[]" << std::endl;
                for (size_t i = 0; i < v.keyframes.size(); ++i)
                {
                    s << indent << "  keyframes[" << i << "]: ";
                    Printer<int32_t>::Stream(s, indent + "  ", v.keyframes[i]);
                }
                s << indent << "num_matches: ";
                Printer<int32_t>::Stream(s, indent + "  ", v.num_matches);
                s << indent << "tracking_quality: ";
                Printer<int32_t>::Stream(s, indent + "  ", v.tracking_quality);
                s << indent << "stage: ";
                Printer<int32_t>::Stream(s, indent + "  ", v.stage);
            }
        };

    } // namespace message_operations
} // namespace ros

#endif // SVO_MSGS_MESSAGE_INFO_H
