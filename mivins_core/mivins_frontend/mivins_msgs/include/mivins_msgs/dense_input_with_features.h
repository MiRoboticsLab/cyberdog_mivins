// Copyright (c) 2023 Beijing Xiaomi Mobile Software Co., Ltd. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by gencpp from file svo_msgs/DenseInputWithFeatures.msg
// DO NOT EDIT!

#ifndef SVO_MSGS_MESSAGE_DENSEINPUTWITHFEATURES_H
#define SVO_MSGS_MESSAGE_DENSEINPUTWITHFEATURES_H

#include <string>
#include <vector>
#include <map>

//#include <ros/types.h>
//#include <ros/serialization.h>
//#include <ros/builtin_message_traits.h>
//#include <ros/message_operations.h>

#include <std_msgs/msg/header.hpp>
#include <geometry_msgs/msg/pose.hpp>
#include <sensor_msgs/msg/image.hpp>
#include <svo_msgs/Feature.h>

namespace svo_msgs
{
    template <class ContainerAllocator>
    struct DenseInputWithFeatures_
    {
        typedef DenseInputWithFeatures_<ContainerAllocator> Type;

        DenseInputWithFeatures_()
            : header(), frame_id(0), pose(), image(), min_depth(0.0), max_depth(0.0), features()
        {
        }
        DenseInputWithFeatures_(const ContainerAllocator &_alloc)
            : header(_alloc), frame_id(0), pose(_alloc), image(_alloc), min_depth(0.0), max_depth(0.0), features(_alloc)
        {
            (void)_alloc;
        }

        typedef ::std_msgs::msg::Header_<ContainerAllocator> _header_type;
        _header_type header;

        typedef uint32_t _frame_id_type;
        _frame_id_type frame_id;

        typedef ::geometry_msgs::Pose_<ContainerAllocator> _pose_type;
        _pose_type pose;

        typedef ::sensor_msgs::Image_<ContainerAllocator> _image_type;
        _image_type image;

        typedef float _min_depth_type;
        _min_depth_type min_depth;

        typedef float _max_depth_type;
        _max_depth_type max_depth;

        typedef std::vector<::svo_msgs::Feature_<ContainerAllocator>, typename ContainerAllocator::template rebind<::svo_msgs::Feature_<ContainerAllocator>>::other> _features_type;
        _features_type features;

        typedef boost::shared_ptr<::svo_msgs::DenseInputWithFeatures_<ContainerAllocator>> Ptr;
        typedef boost::shared_ptr<::svo_msgs::DenseInputWithFeatures_<ContainerAllocator> const> ConstPtr;

    }; // struct DenseInputWithFeatures_

    typedef ::svo_msgs::DenseInputWithFeatures_<std::allocator<void>> DenseInputWithFeatures;

    typedef boost::shared_ptr<::svo_msgs::DenseInputWithFeatures> DenseInputWithFeaturesPtr;
    typedef boost::shared_ptr<::svo_msgs::DenseInputWithFeatures const> DenseInputWithFeaturesConstPtr;

    // constants requiring out of line definition

    template <typename ContainerAllocator>
    std::ostream &operator<<(std::ostream &s, const ::svo_msgs::DenseInputWithFeatures_<ContainerAllocator> &v)
    {
        ros::message_operations::Printer<::svo_msgs::DenseInputWithFeatures_<ContainerAllocator>>::Stream(s, "", v);
        return s;
    }

    template <typename ContainerAllocator1, typename ContainerAllocator2>
    bool operator==(const ::svo_msgs::DenseInputWithFeatures_<ContainerAllocator1> &lhs, const ::svo_msgs::DenseInputWithFeatures_<ContainerAllocator2> &rhs)
    {
        return lhs.header == rhs.header &&
               lhs.frame_id == rhs.frame_id &&
               lhs.pose == rhs.pose &&
               lhs.image == rhs.image &&
               lhs.min_depth == rhs.min_depth &&
               lhs.max_depth == rhs.max_depth &&
               lhs.features == rhs.features;
    }

    template <typename ContainerAllocator1, typename ContainerAllocator2>
    bool operator!=(const ::svo_msgs::DenseInputWithFeatures_<ContainerAllocator1> &lhs, const ::svo_msgs::DenseInputWithFeatures_<ContainerAllocator2> &rhs)
    {
        return !(lhs == rhs);
    }

} // namespace svo_msgs

namespace ros
{
    namespace message_traits
    {

        template <class ContainerAllocator>
        struct IsFixedSize<::svo_msgs::DenseInputWithFeatures_<ContainerAllocator>>
            : FalseType
        {
        };

        template <class ContainerAllocator>
        struct IsFixedSize<::svo_msgs::DenseInputWithFeatures_<ContainerAllocator> const>
            : FalseType
        {
        };

        template <class ContainerAllocator>
        struct IsMessage<::svo_msgs::DenseInputWithFeatures_<ContainerAllocator>>
            : TrueType
        {
        };

        template <class ContainerAllocator>
        struct IsMessage<::svo_msgs::DenseInputWithFeatures_<ContainerAllocator> const>
            : TrueType
        {
        };

        template <class ContainerAllocator>
        struct HasHeader<::svo_msgs::DenseInputWithFeatures_<ContainerAllocator>>
            : TrueType
        {
        };

        template <class ContainerAllocator>
        struct HasHeader<::svo_msgs::DenseInputWithFeatures_<ContainerAllocator> const>
            : TrueType
        {
        };

        template <class ContainerAllocator>
        struct MD5Sum<::svo_msgs::DenseInputWithFeatures_<ContainerAllocator>>
        {
            static const char *Value()
            {
                return "8766f81be9c5b79c57cfdc4197e0a3a2";
            }

            static const char *Value(const ::svo_msgs::DenseInputWithFeatures_<ContainerAllocator> &) { return Value(); }
            static const uint64_t static_value1 = 0x8766f81be9c5b79cULL;
            static const uint64_t static_value2 = 0x57cfdc4197e0a3a2ULL;
        };

        template <class ContainerAllocator>
        struct DataType<::svo_msgs::DenseInputWithFeatures_<ContainerAllocator>>
        {
            static const char *Value()
            {
                return "svo_msgs/DenseInputWithFeatures";
            }

            static const char *Value(const ::svo_msgs::DenseInputWithFeatures_<ContainerAllocator> &) { return Value(); }
        };

        template <class ContainerAllocator>
        struct Definition<::svo_msgs::DenseInputWithFeatures_<ContainerAllocator>>
        {
            static const char *Value()
            {
                return "Header header\n"
                       "uint32 frame_id\n"
                       "geometry_msgs/Pose pose\n"
                       "sensor_msgs/Image image\n"
                       "float32 min_depth\n"
                       "float32 max_depth\n"
                       "svo_msgs/Feature[] features\n"
                       "\n"
                       "================================================================================\n"
                       "MSG: std_msgs/Header\n"
                       "# Standard metadata for higher-level stamped data types.\n"
                       "# This is generally used to communicate timestamped data \n"
                       "# in a particular coordinate frame.\n"
                       "# \n"
                       "# sequence ID: consecutively increasing ID \n"
                       "uint32 seq\n"
                       "#Two-integer timestamp that is expressed as:\n"
                       "# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
                       "# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
                       "# time-handling sugar is provided by the client library\n"
                       "time stamp\n"
                       "#Frame this data is associated with\n"
                       "string frame_id\n"
                       "\n"
                       "================================================================================\n"
                       "MSG: geometry_msgs/Pose\n"
                       "# A representation of pose in free space, composed of position and orientation. \n"
                       "Point position\n"
                       "Quaternion orientation\n"
                       "\n"
                       "================================================================================\n"
                       "MSG: geometry_msgs/Point\n"
                       "# This contains the position of a point in free space\n"
                       "float64 x\n"
                       "float64 y\n"
                       "float64 z\n"
                       "\n"
                       "================================================================================\n"
                       "MSG: geometry_msgs/Quaternion\n"
                       "# This represents an orientation in free space in quaternion form.\n"
                       "\n"
                       "float64 x\n"
                       "float64 y\n"
                       "float64 z\n"
                       "float64 w\n"
                       "\n"
                       "================================================================================\n"
                       "MSG: sensor_msgs/Image\n"
                       "# This message contains an uncompressed image\n"
                       "# (0, 0) is at top-left corner of image\n"
                       "#\n"
                       "\n"
                       "Header header        # Header timestamp should be acquisition time of image\n"
                       "                     # Header frame_id should be optical frame of camera\n"
                       "                     # origin of frame should be optical center of camera\n"
                       "                     # +x should point to the right in the image\n"
                       "                     # +y should point down in the image\n"
                       "                     # +z should point into to plane of the image\n"
                       "                     # If the frame_id here and the frame_id of the CameraInfo\n"
                       "                     # message associated with the image conflict\n"
                       "                     # the behavior is undefined\n"
                       "\n"
                       "uint32 height         # image height, that is, number of rows\n"
                       "uint32 width          # image width, that is, number of columns\n"
                       "\n"
                       "# The legal values for encoding are in file src/image_encodings.cpp\n"
                       "# If you want to standardize a new string format, join\n"
                       "# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n"
                       "\n"
                       "string encoding       # Encoding of pixels -- channel meaning, ordering, size\n"
                       "                      # taken from the list of strings in include/sensor_msgs/image_encodings.hpp\n"
                       "\n"
                       "uint8 is_bigendian    # is this data bigendian?\n"
                       "uint32 step           # Full row length in bytes\n"
                       "uint8[] data          # actual matrix data, size is (step * rows)\n"
                       "\n"
                       "================================================================================\n"
                       "MSG: svo_msgs/Feature\n"
                       "float32 x # x component of 3d point in camera frame\n"
                       "float32 y # y component of 3d point in camera frame\n"
                       "float32 z # z component of 3d point in camera frame \n";
            }

            static const char *Value(const ::svo_msgs::DenseInputWithFeatures_<ContainerAllocator> &) { return Value(); }
        };

    } // namespace message_traits
} // namespace ros

namespace ros
{
    namespace serialization
    {
        template <class ContainerAllocator>
        struct Serializer<::svo_msgs::DenseInputWithFeatures_<ContainerAllocator>>
        {
            template <typename Stream, typename T>
            inline static void allInOne(Stream &stream, T m)
            {
                stream.next(m.header);
                stream.next(m.frame_id);
                stream.next(m.pose);
                stream.next(m.image);
                stream.next(m.min_depth);
                stream.next(m.max_depth);
                stream.next(m.features);
            }

            ROS_DECLARE_ALLINONE_SERIALIZER
        }; // struct DenseInputWithFeatures_

    } // namespace serialization
} // namespace ros

namespace ros
{
    namespace message_operations
    {

        template <class ContainerAllocator>
        struct Printer<::svo_msgs::DenseInputWithFeatures_<ContainerAllocator>>
        {
            template <typename Stream>
            static void Stream(Stream &s, const std::string &indent, const ::svo_msgs::DenseInputWithFeatures_<ContainerAllocator> &v)
            {
                s << indent << "header: ";
                s << std::endl;
                Printer<::std_msgs::msg::Header_<ContainerAllocator>>::Stream(s, indent + "  ", v.header);
                s << indent << "frame_id: ";
                Printer<uint32_t>::Stream(s, indent + "  ", v.frame_id);
                s << indent << "pose: ";
                s << std::endl;
                Printer<::geometry_msgs::Pose_<ContainerAllocator>>::Stream(s, indent + "  ", v.pose);
                s << indent << "image: ";
                s << std::endl;
                Printer<::sensor_msgs::Image_<ContainerAllocator>>::Stream(s, indent + "  ", v.image);
                s << indent << "min_depth: ";
                Printer<float>::Stream(s, indent + "  ", v.min_depth);
                s << indent << "max_depth: ";
                Printer<float>::Stream(s, indent + "  ", v.max_depth);
                s << indent << "features[]" << std::endl;
                for (size_t i = 0; i < v.features.size(); ++i)
                {
                    s << indent << "  features[" << i << "]: ";
                    s << std::endl;
                    s << indent;
                    Printer<::svo_msgs::Feature_<ContainerAllocator>>::Stream(s, indent + "    ", v.features[i]);
                }
            }
        };

    } // namespace message_operations
} // namespace ros

#endif // SVO_MSGS_MESSAGE_DENSEINPUTWITHFEATURES_H
