// Copyright (c) 2023-2023 Beijing Xiaomi Mobile Software Co., Ltd. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by gencpp from file svo_msgs/Feature.msg
// DO NOT EDIT!

#ifndef SVO_MSGS_MESSAGE_FEATURE_H
#define SVO_MSGS_MESSAGE_FEATURE_H

#include <string>
#include <vector>
#include <map>

//#include <ros/types.h>
//#include <ros/serialization.h>
//#include <ros/builtin_message_traits.h>
//#include <ros/message_operations.h>

namespace svo_msgs
{
    template <class ContainerAllocator>
    struct Feature_
    {
        typedef Feature_<ContainerAllocator> Type;

        Feature_()
            : x(0.0), y(0.0), z(0.0)
        {
        }
        Feature_(const ContainerAllocator &_alloc)
            : x(0.0), y(0.0), z(0.0)
        {
            (void)_alloc;
        }
        typedef float _x_type;
        _x_type x;

        typedef float _y_type;
        _y_type y;

        typedef float _z_type;
        _z_type z;

        typedef boost::shared_ptr<::svo_msgs::Feature_<ContainerAllocator>> Ptr;
        typedef boost::shared_ptr<::svo_msgs::Feature_<ContainerAllocator> const> ConstPtr;

    }; // struct Feature_

    typedef ::svo_msgs::Feature_<std::allocator<void>> Feature;

    typedef boost::shared_ptr<::svo_msgs::Feature> FeaturePtr;
    typedef boost::shared_ptr<::svo_msgs::Feature const> FeatureConstPtr;

    // constants requiring out of line definition
    template <typename ContainerAllocator>
    std::ostream &operator<<(std::ostream &s, const ::svo_msgs::Feature_<ContainerAllocator> &v)
    {
        ros::message_operations::Printer<::svo_msgs::Feature_<ContainerAllocator>>::Stream(s, "", v);
        return s;
    }

    template <typename ContainerAllocator1, typename ContainerAllocator2>
    bool operator==(const ::svo_msgs::Feature_<ContainerAllocator1> &lhs, const ::svo_msgs::Feature_<ContainerAllocator2> &rhs)
    {
        return lhs.x == rhs.x &&
               lhs.y == rhs.y &&
               lhs.z == rhs.z;
    }

    template <typename ContainerAllocator1, typename ContainerAllocator2>
    bool operator!=(const ::svo_msgs::Feature_<ContainerAllocator1> &lhs, const ::svo_msgs::Feature_<ContainerAllocator2> &rhs)
    {
        return !(lhs == rhs);
    }
} // namespace svo_msgs

namespace ros
{
    namespace message_traits
    {
        template <class ContainerAllocator>
        struct IsFixedSize<::svo_msgs::Feature_<ContainerAllocator>>
            : TrueType
        {
        };

        template <class ContainerAllocator>
        struct IsFixedSize<::svo_msgs::Feature_<ContainerAllocator> const>
            : TrueType
        {
        };

        template <class ContainerAllocator>
        struct IsMessage<::svo_msgs::Feature_<ContainerAllocator>>
            : TrueType
        {
        };

        template <class ContainerAllocator>
        struct IsMessage<::svo_msgs::Feature_<ContainerAllocator> const>
            : TrueType
        {
        };

        template <class ContainerAllocator>
        struct HasHeader<::svo_msgs::Feature_<ContainerAllocator>>
            : FalseType
        {
        };

        template <class ContainerAllocator>
        struct HasHeader<::svo_msgs::Feature_<ContainerAllocator> const>
            : FalseType
        {
        };

        template <class ContainerAllocator>
        struct MD5Sum<::svo_msgs::Feature_<ContainerAllocator>>
        {
            static const char *Value()
            {
                return "cc153912f1453b708d221682bc23d9ac";
            }

            static const char *Value(const ::svo_msgs::Feature_<ContainerAllocator> &) { return Value(); }
            static const uint64_t static_value1 = 0xcc153912f1453b70ULL;
            static const uint64_t static_value2 = 0x8d221682bc23d9acULL;
        };

        template <class ContainerAllocator>
        struct DataType<::svo_msgs::Feature_<ContainerAllocator>>
        {
            static const char *Value()
            {
                return "svo_msgs/Feature";
            }

            static const char *Value(const ::svo_msgs::Feature_<ContainerAllocator> &) { return Value(); }
        };

        template <class ContainerAllocator>
        struct Definition<::svo_msgs::Feature_<ContainerAllocator>>
        {
            static const char *Value()
            {
                return "float32 x # x component of 3d point in camera frame\n"
                       "float32 y # y component of 3d point in camera frame\n"
                       "float32 z # z component of 3d point in camera frame \n";
            }

            static const char *Value(const ::svo_msgs::Feature_<ContainerAllocator> &) { return Value(); }
        };

    } // namespace message_traits
} // namespace ros

namespace ros
{
    namespace serialization
    {
        template <class ContainerAllocator>
        struct Serializer<::svo_msgs::Feature_<ContainerAllocator>>
        {
            template <typename Stream, typename T>
            inline static void allInOne(Stream &stream, T m)
            {
                stream.next(m.x);
                stream.next(m.y);
                stream.next(m.z);
            }

            ROS_DECLARE_ALLINONE_SERIALIZER
        }; // struct Feature_

    } // namespace serialization
} // namespace ros

namespace ros
{
    namespace message_operations
    {

        template <class ContainerAllocator>
        struct Printer<::svo_msgs::Feature_<ContainerAllocator>>
        {
            template <typename Stream>
            static void Stream(Stream &s, const std::string &indent, const ::svo_msgs::Feature_<ContainerAllocator> &v)
            {
                s << indent << "x: ";
                Printer<float>::Stream(s, indent + "  ", v.x);
                s << indent << "y: ";
                Printer<float>::Stream(s, indent + "  ", v.y);
                s << indent << "z: ";
                Printer<float>::Stream(s, indent + "  ", v.z);
            }
        };

    } // namespace message_operations
} // namespace ros

#endif // SVO_MSGS_MESSAGE_FEATURE_H
